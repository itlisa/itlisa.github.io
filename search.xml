<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>canvas绘制多边形</title>
    <url>/2020/06/06/canvas%E7%BB%98%E5%88%B6%E5%A4%9A%E8%BE%B9%E5%BD%A2/</url>
    <content><![CDATA[<blockquote>
<p><strong>canvas绘制多边形</strong></p>
</blockquote>
<p>canvas封装绘制多边形方法，通过传参来实现绘制图形的定制需要。</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html部分</span></span><br><span class="line">&lt;canvas width = <span class="number">400</span> height = <span class="number">400</span> id = <span class="string">"canvas"</span> &gt; &lt;<span class="regexp">/canvas&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js部分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">angleToRadian</span>(<span class="params">angle</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 角度转弧度</span></span><br><span class="line">    <span class="keyword">return</span> angle * <span class="built_in">Math</span>.PI / <span class="number">180</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 参数说明：</span></span><br><span class="line"><span class="comment">* side:边数</span></span><br><span class="line"><span class="comment">* r: 半径</span></span><br><span class="line"><span class="comment">* offsetX:圆心默认在画布左上角，需要将圆心移动到画布中间，这是水平方向上的移动距离</span></span><br><span class="line"><span class="comment">* offsetY:这是垂直方向移动距离</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAxisPoints</span>(<span class="params">side, r, offsetX, offsetY</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        &#123;side&#125; 几边形</span></span><br><span class="line"><span class="comment">        &#123;r&#125; 半径</span></span><br><span class="line"><span class="comment">        &#123;offsetX&#125; x轴偏移距离</span></span><br><span class="line"><span class="comment">        &#123;offsetY&#125; y轴偏移距离</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> angle = <span class="number">360</span> / side; <span class="comment">// 每条边所占角度</span></span><br><span class="line">    <span class="keyword">var</span> axisArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; side; i++) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 求出每个顶点坐标 angle为弧度值；</span></span><br><span class="line"><span class="comment">         * x = r * Math.cos(angle);  </span></span><br><span class="line"><span class="comment">         * y = r * Math.sin(angle); </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> x = offsetX + <span class="built_in">Math</span>.cos(angleToRadian(angle * (i + <span class="number">1</span>))) * r;</span><br><span class="line">        <span class="keyword">var</span> y = offsetY + <span class="built_in">Math</span>.sin(angleToRadian(angle * (i + <span class="number">1</span>))) * r;</span><br><span class="line">        axisArr.push(&#123;</span><br><span class="line">            x,</span><br><span class="line">            y</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> axisArr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _axisArr = getAxisPoints(<span class="number">3</span>, <span class="number">150</span>, <span class="number">200</span>, <span class="number">200</span>); <span class="comment">// 取到多边形顶点坐标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">"#canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> txt = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">txt.beginPath();</span><br><span class="line">txt.moveTo(_axisArr[<span class="number">0</span>].x, _axisArr[<span class="number">0</span>].y);</span><br><span class="line">_axisArr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        txt.lineTo(_axisArr[index].x, _axisArr[index].y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">txt.lineTo(_axisArr[<span class="number">0</span>].x, _axisArr[<span class="number">0</span>].y);</span><br><span class="line">txt.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">txt.stroke();</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>canvas 多边形</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack打包时遇到的问题以及解决办法</title>
    <url>/2020/06/09/webpack%E6%89%93%E5%8C%85%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p><strong>webpack打包时遇到的问题以及解决方案</strong></p>
</blockquote>
<p>以下是我的webpack相关配置项</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>); <span class="comment">// 引入path path是nodejs内置的package，用来处理路径的</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>); <span class="comment">// html自动打包工具</span></span><br><span class="line"><span class="keyword">const</span> uglifyjsWbpackPlugin = <span class="built_in">require</span>(<span class="string">"uglifyjs-webpack-plugin"</span>); <span class="comment">// js 打包工具</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">8888</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: <span class="string">'babel-loader'</span>,</span><br><span class="line">                include: <span class="regexp">/src/</span>, <span class="comment">// 只转化src目录下的js</span></span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span> <span class="comment">// 排除掉node_modules，优化打包速度</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"postcss-loader"</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(jpeg|png|gif|jpg)$/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">"file-loader"</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: <span class="string">"images/[name].[ext]"</span>,</span><br><span class="line">                        esModule: <span class="literal">false</span> <span class="comment">// 关闭es 模块语法</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: path.resolve(__dirname, <span class="string">"index.html"</span>),</span><br><span class="line">            filename: <span class="string">"index.html"</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> uglifyjsWbpackPlugin() <span class="comment">// js压缩优化</span></span><br><span class="line">    ],</span><br><span class="line">    watch: <span class="literal">true</span> <span class="comment">// 监听文件改动并自动打包</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p><strong>问题一：</strong><br>css打包失败<br><strong>原因：</strong><br>经过调查发现css文件没有在js入口文件引入<br><strong>解决：</strong><br>在入口文件中引入css文件，require(“xxx.css”)；引入的css路径是相对路径</p>
<p><strong>问题二：</strong><br>css打包之后，页面控制台报错，”require is not defined”!<br><strong>原因：</strong><br>在index.html中引入的js还是打包之前的js, js中require css的写法浏览器不能识别， 因为浏览器本身不支持模块化的写法，所以需要借助webpack进行模块化处理，<br><strong>解决：</strong><br>这里引入打包之后的文件即可。</p>
<p><strong>问题三</strong><br>js中引入图片文件报错404找不到</p>
<p><img src="https://b3logfile.com/file/2020/06/img2-f474997d.png" alt="img2.png"></p>
<p><strong>原因</strong><br>file-loader能自动识别CSS代码中的图片路径并将其打包至指定目录，但是JS不行，为什么呢？<br>正常情况下，不使用webpack打包，路径正确图片是可以正常显示的，使用webpack打包之后，Webpack并不知道’./static/img/cat.jpeg’是一张图片，<br><strong>解决</strong><br>需要先将图片资源加载进来，然后再将其作为图片路径添加至图片对象。</p>
<p><img src="https://b3logfile.com/file/2020/06/img1-8e04d57b.png" alt="img1.png"></p>
<p><strong>问题四：</strong><br>打包之后图片无法正常显示，控制台也不报错<br><strong>原因：</strong><br>webpack配置文件中，我同时引用file-loader和url-loader两种打包工具，两者冲突<br><strong>解决：</strong><br>删除一个即可</p>
<p><strong>问题五：</strong><br>js中引入图片路径报错输出[object-module]<br><strong>原因：</strong><br>我是用file-loader打包的<br>file-loader在新版本中esModule属性默认为true 即默认使用ES模块语法 导致了造成了引用图片文件的方式和以前的版本不一样 引入路径改变了 自然找不到图片；<br>需要注意的是，如果你用的是url-loader, 同样也会存在这个问题，url-loader内部封装了file-loader<br><strong>解决：</strong><br>在webpack的配置文件webpack.config.js中 修改esModule: false 关闭ES模块语法即可</p>
<blockquote>
<p><strong>css之loader加载注意事项</strong></p>
</blockquote>
<p>其中CSS文件的打包需要用到css-loader和style-loader两个loader，css-loader只是用于加载css文件（并没有添加到页面），而style-loader则是将打包后的css代码以<code>&lt;style&gt;</code>标签形式添加到页面头部。针对css文件使用的loader，注意有先后顺序，数组项越靠后越先执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">        use:[<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"postcss-loader"</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>打包图片保持图片名不变，并添加到指定目录</strong></p>
</blockquote>
<p>file-loader 默认将图片转成base64格式，如何才能保持图片名不变，而且也能够添加到指定目录下呢？我们只需要再添加一个options属性即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,</span><br><span class="line">    loader: <span class="string">'file-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">        name: <span class="string">'images/[name].[ext]'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中name属性其实就是图片打包后的路径，其中包括图片名（[name]）和图片格式（[ext]）。<br>还有一种打包方式url-loader,这里limit属性的作用就是将小于8192B（8.192K）大小的图片转成base64格式，而大于这个大小的图片将会以file-loader的方式进行打包处理,如果不写limit属性，那么url-loader就会默认将所有图片转成base64。</p>
<pre><code class="javascript">{
    test: <span class="regexp">/\.(png|jpg|gif|svg)$/</span>,
    loader: <span class="string">'url-loader'</span>,
    options: {
        name: <span class="string">'images/[name].[ext]'</span>,
        limit: <span class="number">8192</span>
    }
}</code></pre>
<blockquote>
<p><strong>webpack之watch</strong></p>
</blockquote>
<p>可实现相关源文件改变后自动更新bundle.js文件的功能。在配置文件中添加 watch:true 或执行 webpack -w，即可开启watch功能；测试发现，与（一个或多个）bundle.js有关的所有js、css等模块发生变化，就会自动执行打包，更新硬盘上的bundle.js文件。</p>
<blockquote>
<p><strong>webpack之webpack-dev-server</strong></p>
</blockquote>
<p>webpack-dev-server默认开启以上的监视功能。但两者监视效果存在差异：<br>1.webpack-dev-server自带的监视自动打包功能，新打包的文件存在于内存中，对硬盘上的bundle.js无影响。新文件的内存路径与配置文件中的publicPath相关，如<a href="http://localhost:8080/{publicPath}/bundle.js" target="_blank" rel="noopener">http://localhost:8080/{publicPath}/bundle.js</a><br>2.手动执行webpack -w来启动的watch效果，会修改硬盘上的bundle.js文件</p>
<blockquote>
<p><strong>打包后的dist目录如下：</strong></p>
</blockquote>
<p><img src="https://b3logfile.com/file/2020/06/dist-ba510e0d.png" alt="dist.png"></p>
]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>vue实战小技巧</title>
    <url>/2020/06/23/vue%E5%AE%9E%E6%88%98%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>本片文章借鉴自掘金的’前端进击者’,仅用作个人学习使用。</p>
<blockquote>
<p><strong>外部监听组件生命周期函数</strong></p>
</blockquote>
<p>使用场景：<br>应用第三方组件，需要监听第三方组件数据变化，但是没有提供change事件，so, 这时候就需要你在外部去监听组件的updated钩子函数</p>
<a id="more"></a>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template &gt;</span><br><span class="line">    &lt;!--通过 @hook: updated = <span class="string">"xxx"</span>监听组件的updated生命钩子函数-- &gt;</span><br><span class="line">    &lt;!--组件的所有生命周期钩子函数都可以通过这种方式去实现监听-- &gt;</span><br><span class="line">&lt;c-component @hook: updated = <span class="string">"$_handleSelectUpdated"</span> &gt; &lt;<span class="regexp">/c-component&gt; </span></span><br><span class="line"><span class="regexp">&lt;/</span>template &gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            CComponent</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            $_handleSelectUpdated() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'c组件数据已更新'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style lang = "less" &gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>内部监听组件的生命周期函数</strong></p>
</blockquote>
<p>场景需要：<br>监听事件和销毁事件放在一起，增加可读性</p>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span> </span>= <span class="string">'chart'</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$chart = echart.init(<span class="keyword">this</span>.$el);</span><br><span class="line">        <span class="comment">// 图表配置，请求赋值数据等操作</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.$_handleResizeChart);</span><br><span class="line">        <span class="comment">// 通过hook监听组件销毁钩子，并取消监听事件 $once 只触发一次，也可以使用$on进行监听。</span></span><br><span class="line">        <span class="keyword">this</span>.$once(<span class="string">'hook:beforeDestroy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.$_handleResizeChart);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        $_handleResizeChart() &#123;</span><br><span class="line">            <span class="comment">// this.$chart.resize();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>自己动手封装一个vue状态管理</strong></p>
</blockquote>
<p>在前端项目中，组件之间需要共享数据状态，一般情况都会选择使用vuex，但是对于小型项目来说是不推荐使用vuex，因为它是有点繁琐且冗余，这时候我们就可以使用vue2.6提供的api Vue.observable手动打造一个vuex。</p>
<p>代码实现：</p>
<p>创建store：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = Vue.observable(&#123;</span><br><span class="line">    userName: <span class="string">'lisa'</span>,</span><br><span class="line">    userAge: <span class="number">18</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    setUserInfo(name) &#123;</span><br><span class="line">        store.userName = name;</span><br><span class="line">    &#125;,</span><br><span class="line">    setUserAge(age) &#123;</span><br><span class="line">        store.userAge = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在main.js中引入，方法挂到vue身上，可以全局使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    store,</span><br><span class="line">    mutations</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@/store/index.js'</span>;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$store = store;</span><br><span class="line">Vue.prototype.$mutations = mutations;</span><br></pre></td></tr></table></figure>

<p>组件中使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt; script &gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$mutations.setUserAge(<span class="string">'19'</span>); <span class="comment">// 赋值操作</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$store.userAge) <span class="comment">// 读取操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>js设计模式</title>
    <url>/2020/06/24/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p><strong>单例模式</strong></p>
</blockquote>
<p>顾名思义：一个类有且只有一个实例，称之为单例模式。</p>
<a id="more"></a>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先封装一个构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line"><span class="comment">// 封装一个单例模式的调用方式 （自执行函数）</span></span><br><span class="line"><span class="keyword">const</span> newFn = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Person();</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = newFn(); <span class="comment">// Person</span></span><br><span class="line"><span class="keyword">var</span> f2 = newFn(); <span class="comment">// Person</span></span><br><span class="line"><span class="built_in">console</span>.log(f1 === f2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>组合模式(观察者模式)</strong></p>
</blockquote>
<p>组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构。除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性</p>
<p>使用场景：<br>A.含有某种层级结构的对象集合(具体结构在开发过程中无法确定)<br>B.希望对这些对象或者其中的某些对象执行某种操作</p>
<p>缺点：<br>因为组合对象的任何操作都会对所有的子对象调用同样的操作，所以当组合的结构很大时会有性能问题。</p>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoHome</span> </span>&#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"到家了，开门"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenMusic</span> </span>&#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"打开音乐"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenComputer</span> </span>&#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"打开电脑"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comb</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.skills = [];</span><br><span class="line">    &#125;</span><br><span class="line">    add(task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.skills.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    action() &#123;</span><br><span class="line">        <span class="keyword">this</span>.skills.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            item.init();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comb = <span class="keyword">new</span> Comb();</span><br><span class="line">comb.add(<span class="keyword">new</span> GoHome());</span><br><span class="line">comb.add(<span class="keyword">new</span> OpenComputer());</span><br><span class="line">comb.add(<span class="keyword">new</span> OpenMusic());</span><br><span class="line"><span class="comment">// 到家了</span></span><br><span class="line"><span class="comment">// 打开电脑</span></span><br><span class="line"><span class="comment">// 打开音乐</span></span><br><span class="line">comb.action();</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>适配器模式</strong></p>
</blockquote>
<p>适配器模式，将一个接口装换成客户希望的另一个接口，使接口兼容那些类可以一起工作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fn</span></span>&#123;</span><br><span class="line">    test()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'旧接口'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.fn = <span class="keyword">new</span> Fn();</span><br><span class="line">    &#125;;</span><br><span class="line">    test()&#123;</span><br><span class="line">        <span class="keyword">const</span> info = <span class="keyword">this</span>.fn.test();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`适配<span class="subst">$&#123;info&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> Target();</span><br><span class="line"><span class="built_in">console</span>.log(target.test()) <span class="comment">// 适配旧接口</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>代理模式</strong></p>
</blockquote>
<p>代理模式，访问者和目标对象之间添加一层代理，通过代理授权和控制。简单理解就是为原对象找一个替代对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> idol = &#123;</span><br><span class="line">    name:<span class="string">'lisa'</span>,</span><br><span class="line">    price:<span class="number">10000</span>,</span><br><span class="line">    iphone:<span class="number">110000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(idol,&#123;</span><br><span class="line">    <span class="keyword">get</span>(target,key,value)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'经纪人电话1100000'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// set 方法需要返回一个boolean值，true表示赋值成功</span></span><br><span class="line">    <span class="keyword">set</span>(target,key,value)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key===<span class="string">'price'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(value&lt;target.price) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'报价过低'</span>);</span><br><span class="line">            target.price = value;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.iphone <span class="comment">// 经纪人电话</span></span><br><span class="line">proxy.price = <span class="number">1000</span>; <span class="comment">// Uncaught Error 报价过低</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>单例模式 组合模式 适配器模式 观察者模式 代理模式</tag>
      </tags>
  </entry>
  <entry>
    <title>react的setState是同步还是异步</title>
    <url>/2020/06/24/react%E7%9A%84setState%E6%98%AF%E5%90%8C%E6%AD%A5%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<p>setState方法，既是同步也是异步，分情况。<br>同步：在原生事件和setTimeout中是同步的。<br>异步：在react的合成事件，类似于onClick,以及在钩子函数中是异步的。</p>
<p>个人理解，setState内部执行并不是异步的，由于react是在数据更新之前调用合成事件和钩子函数，所以在setState更新数据之后不能立即获取到最新数据，可以通过setState({},callback)回调函数进行获取。</p>
<p>setState批量更新优化，也是建立在’异步’之上的,在原生事件和setTimeout中只会执行一次，’异步’中多次对一个值进行setState，setState的批量更新策略会对其进行覆盖，取最后一次执行。</p>
]]></content>
      <tags>
        <tag>react setState</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6+新增语法</title>
    <url>/2020/06/26/ES6+%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p><strong>ES6新增值比较函数Object.is()</strong></p>
</blockquote>
<p>ES6新增加的比较方法大多数情况下等价于’===’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> === <span class="number">1</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">1</span>, <span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a'</span> === <span class="string">'a'</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="string">'a'</span>, <span class="string">'a'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> === <span class="literal">true</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">true</span>, <span class="literal">true</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> === <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">null</span>, <span class="literal">null</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">undefined</span>, <span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>但对于NaN、0、+0、 -0，则和 “===” 不同</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> === <span class="number">-0</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    -</span><br><span class="line">    <span class="number">0</span> === +<span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">-0</span>, +<span class="number">0</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>es8新增语法 padStart()padEnd()</strong></p>
</blockquote>
<p>这两个函数方法是ES8新增的实例方法，不兼容IE浏览器，函数接受两个参数，第一个是字符串需要填充的目标长度（必填），第二个是填充字符串（可选）, 如果填充的字符串长度超过了目标长度，则保留最左侧的部分。<br>使用方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>, <span class="string">'ab'</span>); <span class="comment">// 'abax'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">5</span>, <span class="string">'ad'</span>); <span class="comment">// 'xabab'</span></span><br></pre></td></tr></table></figure>

<p>假设现在有这样一个需求，实现mask函数将’123456’转为’##3456’, 只保留最后四个字符。</p>
<p>试着用上面提供的方法做一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mask = <span class="function">(<span class="params">str, maskChar = <span class="string">'#'</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">-4</span>).padStart(str.length, maskChar);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mask(<span class="string">'123456'</span>)) <span class="comment">// ##3456</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Object.fromEntries()和Object.entries()</strong></p>
</blockquote>
<p>场景需要：<br>let obj = {a:1, b:2, c:3}; 提取对象中所有value值大于1的键值对并返回最新的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">Object</span>.fromEntries(<span class="built_in">Object</span>.entries(obj).filter(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> v &gt; <span class="number">1</span>)); <span class="comment">// &#123;b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>…rest代替arguments</strong></p>
</blockquote>
<p>es6箭头函数中不识别arguments对象，使用…args来替代arguments获取参数。</p>
<p>举例说明：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5 以下两种方法都可以</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 只能通过这种方式获取 args是一个数组</span></span><br><span class="line"><span class="keyword">const</span> two = <span class="function">(<span class="params">...args</span>) =&gt;</span> args;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>object.is()</tag>
      </tags>
  </entry>
  <entry>
    <title>代码安全隐患</title>
    <url>/2020/06/27/%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E9%9A%90%E6%82%A3/</url>
    <content><![CDATA[<blockquote>
<p><strong>a标签慎用target=”_blank”</strong></p>
</blockquote>
<p>存在问题：<br>1：新打开的窗口可以通过window.opener获取到来源页面的window对象，即使跨域也可以，通过修改window.opener.location.href=’xxx’，指向另一个地址，这样新窗口可能会把原来的地址改了并进行页面的伪装来欺骗用户。</p>
<p>2：新打开的窗口与原窗口共用一个进程，若是新页面有性能不好的代码也会影响原页面。</p>
<p>解决方案：<br>1：加上rel=”noopener” 或者 rel=”noreferrer”,这样新窗口打开的window.opener就是null,而且会让新窗口运行在独立的进程里，不会拖累原来的页面的进程。（有些浏览器针对性能的优化即使不加，新窗口也会在独立进程打开，为了安全起见还是加一下比较好）</p>
<p>代码实验：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a 标签模拟点击跳转新页面</span></span><br><span class="line">&lt;a href=<span class="string">"http://itlisa.github.io/"</span> target=<span class="string">"_blank"</span>&gt; 点击跳转 &lt;a&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新页面控制台模拟修改原页面url</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.opener.location.href = <span class="string">'http://itlisa.github.io'</span>;</span><br><span class="line"></span><br><span class="line">此时原页面已经被这个<span class="string">'http://itlisa.github.io'</span>这个网站替换掉了。</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>实现一个对话框支持拖拽</title>
    <url>/2020/06/05/%E6%8B%96%E6%8B%BD%E6%A1%86/</url>
    <content><![CDATA[<p>面试中经常会被问到有没有做过类似模态框的拖拽行为，当时脑子里面没有一个具体的实现方向，大致思路，其实自己静下心动手实践一下也不难，了解如何去操作，实现逻辑屡清楚了基本离成功就不远了，需要注意的事，这里面涉及到很多细节问题，比如获取鼠标点击位置距离wrap的一个相对位置，wrap自身的一个宽度获取，有滚动条的时候，对于滚动距离的获取等等，这些一定要弄清楚了。</p>
<blockquote>
<p> <strong>创建一个dialog类，实现一个dialog对话框，可拖拽</strong></p>
</blockquote>
<a id="more"></a>

<p>效果图</p>
<p><img src="https://b3logfile.com/file/2020/06/1-a4f64515.png" alt="1.png"></p>
<p><img src="https://b3logfile.com/file/2020/06/2-f2a4be67.png" alt="2.png"></p>
<p><img src="https://b3logfile.com/file/2020/06/3-ba32c5ee.png" alt="3.png"></p>
<p>具体实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.isMoving = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.dialog = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.box = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.text = text || <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">this</span>.toLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.toTop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open() &#123;</span><br><span class="line">        <span class="keyword">this</span>.dialog = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        <span class="keyword">this</span>.dialog.style = <span class="string">`</span></span><br><span class="line"><span class="string">            width:200px;</span></span><br><span class="line"><span class="string">            height:100px;</span></span><br><span class="line"><span class="string">            padding:20px;</span></span><br><span class="line"><span class="string">            background-color:#ccc;</span></span><br><span class="line"><span class="string">            position:absolute;</span></span><br><span class="line"><span class="string">            top:50%;</span></span><br><span class="line"><span class="string">            left:50%;</span></span><br><span class="line"><span class="string">            border-radius:4px;`</span>;</span><br><span class="line">        <span class="keyword">this</span>.dialog.innerText = <span class="keyword">this</span>.text;</span><br><span class="line">        <span class="keyword">this</span>.dialog.addEventListener(<span class="string">'click'</span>, ev =&gt; ev.stopPropagation());</span><br><span class="line">        <span class="keyword">this</span>.dialog.addEventListener(<span class="string">'mousedown'</span>, <span class="keyword">this</span>.handleMouseDown.bind(<span class="keyword">this</span>));</span><br><span class="line">        <span class="comment">// 这里需要注意，为了防止鼠标移动过快出现bug，将事件代理到document身上</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, <span class="keyword">this</span>.handleMouseMove.bind(<span class="keyword">this</span>));</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, <span class="keyword">this</span>.handleMouseUp.bind(<span class="keyword">this</span>));</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.dialog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleMouseDown(ev) &#123;</span><br><span class="line">        <span class="keyword">this</span>.isMoving = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 鼠标按下的时候，生成一个框，给基础样式</span></span><br><span class="line">        <span class="comment">// 位置和原来的dom重合，加定位</span></span><br><span class="line">        <span class="keyword">this</span>.box = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        <span class="keyword">this</span>.box.style = <span class="string">`</span></span><br><span class="line"><span class="string">            width:<span class="subst">$&#123;<span class="keyword">this</span>.dialog.offsetWidth&#125;</span>px;</span></span><br><span class="line"><span class="string">            height:<span class="subst">$&#123;<span class="keyword">this</span>.dialog.offsetHeight&#125;</span>px;</span></span><br><span class="line"><span class="string">            position:absolute;</span></span><br><span class="line"><span class="string">            top:<span class="subst">$&#123;<span class="keyword">this</span>.dialog.offsetTop&#125;</span>px;</span></span><br><span class="line"><span class="string">            left:<span class="subst">$&#123;<span class="keyword">this</span>.dialog.offsetLeft&#125;</span>px;</span></span><br><span class="line"><span class="string">            border:1px dashed #000;</span></span><br><span class="line"><span class="string">            border-radius:4px;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.box);</span><br><span class="line">        <span class="comment">// 鼠标按下的时候，记录鼠标点击的位置相对于div块的坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x = ev.offsetX;</span><br><span class="line">        <span class="keyword">this</span>.y = ev.offsetY;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleMouseMove(ev) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isMoving) &#123;</span><br><span class="line">            <span class="comment">// 有滚动条要把滚动条的距离算在内</span></span><br><span class="line">            <span class="keyword">let</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft;</span><br><span class="line">            <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// div跟着走的时候，需要把鼠标按下时的那个相对坐标算在内</span></span><br><span class="line">            <span class="keyword">this</span>.toLeft = ev.clientX + scrollLeft - <span class="keyword">this</span>.x;</span><br><span class="line">            <span class="keyword">this</span>.toTop = ev.clientY + scrollTop - <span class="keyword">this</span>.y;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置一下拖拽边界</span></span><br><span class="line">            <span class="keyword">let</span> maxLeft = <span class="built_in">window</span>.innerWidth + scrollLeft - <span class="keyword">this</span>.dialog.offsetWidth;</span><br><span class="line">            <span class="keyword">let</span> maxTop = <span class="built_in">window</span>.innerHeight + scrollTop - <span class="keyword">this</span>.dialog.offsetHeight;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.toLeft &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果left小于0，则置为0，防止div从左侧拖出</span></span><br><span class="line">                <span class="keyword">this</span>.toLeft = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.toLeft &gt; maxLeft) &#123;</span><br><span class="line">                <span class="comment">// 如果left值大于极限，则置为极限，防止div从右侧被拖出</span></span><br><span class="line">                <span class="keyword">this</span>.toLeft = maxLeft;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.toTop &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.toTop = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.toTop &gt; maxTop) &#123;</span><br><span class="line">                <span class="keyword">this</span>.toTop = maxTop;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置一下框的位置</span></span><br><span class="line">            <span class="keyword">this</span>.box.style.left = <span class="keyword">this</span>.toLeft + <span class="string">'px'</span>;</span><br><span class="line">            <span class="keyword">this</span>.box.style.top = <span class="keyword">this</span>.toTop + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleMouseUp() &#123;</span><br><span class="line">        <span class="keyword">this</span>.a += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 鼠标抬起的时候，设置一下div块的位置，跟到框所在的位置</span></span><br><span class="line">        <span class="keyword">this</span>.dialog.style.left = <span class="keyword">this</span>.toLeft + <span class="string">'px'</span>;</span><br><span class="line">        <span class="keyword">this</span>.dialog.style.top = <span class="keyword">this</span>.toTop + <span class="string">'px'</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(<span class="keyword">this</span>.box);</span><br><span class="line">        <span class="comment">// 清除事件监听事件</span></span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, <span class="keyword">this</span>.handleMouseMove);</span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, <span class="keyword">this</span>.handleMouseUp);</span><br><span class="line">        <span class="keyword">this</span>.isMoving = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> dialog = <span class="keyword">new</span> Dialog(<span class="string">'hello'</span>);</span><br><span class="line">dialog.open();</span><br></pre></td></tr></table></figure>

<pre><code>这里的mousemove的监听对象修改为了document，否则如果我们拖拽速度太快会出现bug，即可能鼠标脱离了容器，然后这时就会出现问题，
只要将事件代理到了document身上就可以解决这个问题了。</code></pre>]]></content>
      <tags>
        <tag>diolag拖拽</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2020/07/01/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p><strong>矩形碰撞检测（不考虑旋转）</strong></p>
</blockquote>
<p>2d矩形碰撞检测，矩形平行于坐标轴</p>
<a id="more"></a>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行代码需要的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 两个矩形的中心坐标</span></span><br><span class="line"><span class="comment"> * 2. 两个矩形的宽（width）</span></span><br><span class="line"><span class="comment"> * 3. 两个矩形的高（height）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> red = &#123;</span><br><span class="line">    x: <span class="number">100</span>,</span><br><span class="line">    y: <span class="number">100</span>,</span><br><span class="line">    wdith: <span class="number">80</span>,</span><br><span class="line">    height: <span class="number">60</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> green = &#123;</span><br><span class="line">    x: <span class="number">200</span>,</span><br><span class="line">    y: <span class="number">200</span>,</span><br><span class="line">    wdith: <span class="number">80</span>,</span><br><span class="line">    height: <span class="number">60</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心代码</span></span><br><span class="line"><span class="comment">// 碰撞检测</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="built_in">Math</span>.abs(red.x - green.x) &lt; red.width / <span class="number">2</span> + green.width / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="built_in">Math</span>.abs(red.y - green.y) &lt; red.height / <span class="number">2</span> + green.height / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (x &amp;&amp; y) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'发生碰撞'</span>)</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>

<p>放上思路图一张：</p>
<p><img src="https://b3logfile.com/file/2020/07/WechatIMG36-160a4f49.jpeg" alt="WechatIMG36.jpeg"></p>
<blockquote>
<p><strong>三种方法实现队列循环</strong></p>
</blockquote>
<p>题目要求：<br>实现红、绿、黄灯每隔指定时间不断重复交替亮灯。</p>
<p>第一种方法，利用promise链式调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">red</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'红灯'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">green</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'绿灯'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yellow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'黄灯'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">light</span>(<span class="params">cb, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            cb();</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> step = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> light(red, <span class="number">3000</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> light(green, <span class="number">2000</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> light(yellow, <span class="number">1000</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 递归循环调用</span></span><br><span class="line">        step();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>第二种方法，使用setInterval实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">light</span>(<span class="params">l, t</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(l);</span><br><span class="line">    &#125;, t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    light(<span class="string">"绿灯"</span>, <span class="number">3000</span>);</span><br><span class="line">    light(<span class="string">"红灯"</span>, <span class="number">2000</span>);</span><br><span class="line">    light(<span class="string">"黄灯"</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(run, <span class="number">6000</span>);</span><br></pre></td></tr></table></figure>

<p>第三种方法，使用async/awite</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">light</span>(<span class="params">delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(), delay)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">arr, times</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">        <span class="keyword">await</span> light(times[i])</span><br><span class="line">    &#125;</span><br><span class="line">    step(arr, times);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">step([<span class="string">'红'</span>, <span class="string">'绿'</span>, <span class="string">'黄'</span>], [<span class="number">3000</span>, <span class="number">2000</span>, <span class="number">1000</span>]);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>文本溢出解决办法</strong></p>
</blockquote>
<p>问题：定宽溢出<br>解决方案：hover是弹出框提示 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html部分</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">'wrap'</span>&gt;</span><br><span class="line">    &lt;p&gt;我是一个标题&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;我是一个标题我是一个标题&lt;/</span>p&gt;</span><br><span class="line">    &lt;p&gt;我是一个标题&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;我是一个标题&lt;/</span>p&gt;</span><br><span class="line">    &lt;p&gt;我是一个标题我是一个标题我是一个标题&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// style样式</span></span><br><span class="line"> .wrap &#123;</span><br><span class="line">    width: <span class="number">150</span>px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    border: <span class="number">1</span>px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    white-space: nowrap; <span class="comment">// 文本溢出不换行</span></span><br><span class="line">    display: inline-block; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p:hover &#123;</span><br><span class="line">    animation: move <span class="number">2</span>s infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes move &#123;</span><br><span class="line">    <span class="number">0</span>% &#123;</span><br><span class="line">        transform: translate(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100</span>% &#123;</span><br><span class="line">        transform: translate(calc(<span class="number">-100</span>% + <span class="number">150</span>px));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*由于 &lt;p&gt; 标签的宽度为父元素的 100%,很难进行后面的操作</span></span><br><span class="line"><span class="comment">*通过设置inline-block拿到实际本文的宽度</span></span><br><span class="line"><span class="comment">*需要注意transform 是无法作用在内联元素之上的。</span></span><br><span class="line"><span class="comment">*需要滚动的距离 S = 溢出的文本元素的宽度 - 父元素的宽度</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>vue路由守卫</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(to.matched.some(<span class="function"><span class="params">res</span>=&gt;</span>res.meta.isLogin))&#123;<span class="comment">//判断是否需要登录</span></span><br><span class="line">        <span class="keyword">if</span> (sessionStorage[<span class="string">'username'</span>]) &#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            next(&#123;</span><br><span class="line">                path:<span class="string">"/login"</span>,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    redirect:to.fullPath</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p>to 表示将要跳转到的组件 (目标组件)<br>console.log(from); //(源组件)<br>next();<br>next 是一个函数<br>next() 进入下一个组件的钩子函数<br>next(false) 阻止跳转 中断导航<br>next(“/login”) 进入指定的组件的钩子函数</p>
]]></content>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>手写promise</title>
    <url>/2020/07/15/%E6%89%8B%E5%86%99promise/</url>
    <content><![CDATA[<blockquote>
<p><strong>promise实现</strong></p>
</blockquote>
<p>promise优化了回调函数的用法，让原本需要纵向一层一层嵌套的回调函数实现了横向的调用，也就是链式调用。（解决地狱回调问题）</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myPromise 接收一个函数作为参数，函数中有两个函数参数，分别为resolve、reject作为成功或者失败的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myPromise</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">'pending'</span>; <span class="comment">// 定义初始状态</span></span><br><span class="line">      <span class="keyword">this</span>.result = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 在没有通过 new 关键字去实例化的之前，它的内部方法this是无绑定状态的，</span></span><br><span class="line">      <span class="comment">// 如果不做绑定，那么这个方法的 this 会指向 undefined，所以需要使用bind重新绑定this指向</span></span><br><span class="line">      cb(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>), <span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  myPromise.prototype.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.state = <span class="string">'fullfiled'</span>;</span><br><span class="line">          <span class="keyword">this</span>.result = val;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  myPromise.prototype.reject = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.state = <span class="string">'rejected'</span>;</span><br><span class="line">          <span class="keyword">this</span>.result = val;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then函数接受两个函数参数，作为成功回调和失败回调</span></span><br><span class="line">  myPromise.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">isResolved, isRejected</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'fullfiled'</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> res = isResolved(<span class="keyword">this</span>.result);</span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise) &#123;</span><br><span class="line">              <span class="keyword">return</span> res;</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="keyword">this</span>.result);</span><br><span class="line">          <span class="keyword">const</span> res = isRejected(error);</span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise &amp;&amp; auguments[<span class="number">0</span>]) &#123;</span><br><span class="line">              <span class="keyword">return</span> res;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// catch方法专门给reject使用的</span></span><br><span class="line">  myPromise.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">isRejected</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="keyword">this</span>.result);</span><br><span class="line">          <span class="keyword">const</span> res = isRejected(error);</span><br><span class="line">          <span class="keyword">if</span> (res <span class="keyword">instanceof</span> myPromise &amp;&amp; auguments[<span class="number">0</span>]) &#123;</span><br><span class="line">              <span class="keyword">return</span> res;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">"哎呦出错了"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  promise</span><br><span class="line">      .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data);</span><br><span class="line">      &#125;, (data) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>promise promise.all promise.race</tag>
      </tags>
  </entry>
  <entry>
    <title>编程题（一）</title>
    <url>/2020/06/04/%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>最近迷上做js算法题了，哈哈哈，以后会持续更新我做过比较经典有意思的算法题，我目前只做一些比较基础的，查缺补漏，感觉自己的js基础还是欠缺，勤能补拙，先把地基打好才能盖出好房子，你说是吧~~</p>
<a id="more"></a>

<blockquote>
<p><strong>数组降维</strong></p>
</blockquote>
<p>将多维数组降成一维数组结构<br>方法一：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_myFlat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 判断当前元素是否是数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">            <span class="comment">// arguments.callee（）：匿名函数的递归调用，保证函数的封装性，与函数名解耦</span></span><br><span class="line">            res = res.concat(<span class="built_in">arguments</span>.callee(arr[i]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = res.concat(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_myFlat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, [<span class="number">8</span>]]]])); <span class="comment">// [1,2,4,5,6,8]</span></span><br></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, [<span class="number">8</span>]]]].flat(<span class="literal">Infinity</span>);  <span class="comment">// 由于是es2019新特性，so不兼容IE，需要babel转义</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>数组对象方法扩展</strong></p>
</blockquote>
<p>题目描述：<br>已知数组 data= [{ name: ‘低风险’, value: 300 }, { name: ‘中风险’, value: 230 }, { name: ‘高风险’, value: 409 }]；<br>获取指定key值所对应的value数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params">arr, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr) || !key) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"param is error"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item[key]) &#123;</span><br><span class="line">            res.push(item[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">    name: <span class="string">'低风险'</span>,</span><br><span class="line">    value: <span class="number">300</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: <span class="string">'中风险'</span>,</span><br><span class="line">    value: <span class="number">230</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: <span class="string">'高风险'</span>,</span><br><span class="line">    value: <span class="number">409</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> names = getName(data, <span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(names); <span class="comment">// ["低风险", "中风险", "高风险"]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>函数防抖/节流</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 函数防抖</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 就是指触发事件后，在 n 秒内函数只能执行一次，如果触发事件后在 n 秒内又触发了事件，则会重新计算函数延执行时间。</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 常见需要防抖事件 onresize，scroll，mousemove ,mousehover</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (timer !== <span class="literal">null</span>) &#123;</span><br><span class="line">             clearTimeout(timer);</span><br><span class="line">         &#125;;</span><br><span class="line">         timer = setTimeout(fn, wait)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random())</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, debounce(handle, <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  + 函数节流</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  作用：减少代码执行次数，提升网页性能 </span></span><br><span class="line"><span class="comment">  函数节流使用场景： oninput/ onmousemove /onscroll /onresize 等事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  + 1 搜索框搜索输入，只需用户最后一次输入完，再发送请求</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  + 2 防止用户多次点击提交表单</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">     <span class="comment">// 闭包 方便调用，避免全局变量污染</span></span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span><br><span class="line">         flag = <span class="literal">false</span>;</span><br><span class="line">         timer &amp;&amp; clearTimeout(timer);</span><br><span class="line">         setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">             fn();</span><br><span class="line">             flag = <span class="literal">true</span>;</span><br><span class="line">         &#125;, delay);</span><br><span class="line">     &#125;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡：从里面往外面触发事件</span></span><br><span class="line"><span class="comment">// 捕获：从外面往里面触发事件</span></span><br><span class="line"><span class="comment">// addEventListener()第三个参数： true 是捕获，false是冒泡</span></span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, throttle(scroll, <span class="number">3000</span>), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>二分查找算法</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">arr, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = arr.length - <span class="number">1</span>, <span class="comment">//最大值</span></span><br><span class="line">        min = <span class="number">0</span>; <span class="comment">//最小值</span></span><br><span class="line">    <span class="keyword">while</span> (min &lt;= max) &#123;</span><br><span class="line">        <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor((max + min) / <span class="number">2</span>); <span class="comment">//中间值</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; data) &#123;</span><br><span class="line">            min += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; data) &#123;</span><br><span class="line">            max -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//没找到返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(search([1, 2, 3, 4, 8], 8));</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>冒泡排序</strong></p>
</blockquote>
<p>原理<br>依次比较相邻的两个值，如果后面的比前面的小，则将小的元素排到前面。依照这个规则进行多次并且递减的迭代，直到顺序正确。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 利用双层循环实现</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                <span class="keyword">let</span> temp = arr[j]; <span class="comment">// 将最大的值暂存</span></span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>]; <span class="comment">// 重新进行赋值</span></span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line">bubbleSort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>快速排序</strong></p>
</blockquote>
<p>原理<br>从数组中选定一个基数，然后把数组中的每一项与此基数做比较，小的放入一个新数组，大的放入另外一个新数组。然后再采用这样的方法操作新数组。直到所有子集只剩下一个元素，排序完成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125; <span class="comment">//判断数组，一个长度直接返回 </span></span><br><span class="line">    <span class="keyword">var</span> baseNum = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> left = [];</span><br><span class="line">    <span class="keyword">var</span> right = [];</span><br><span class="line">    <span class="keyword">var</span> mid = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; baseNum) &#123;</span><br><span class="line">            left.push(arr[i])</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; baseNum) &#123;</span><br><span class="line">            right.push(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mid.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat(mid, quickSort(right));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> _sort = quickSort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(_sort); <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>插入排序</strong></p>
</blockquote>
<p>原理<br>快速排序类似于整理扑克牌，每次将下一个值和上一个值进行比较大小，然后互换位置，在小规模数据或者基本有序数据时特别高效.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = insertSort([<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">90</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// [0, 1, 2, 5, 7, 9, 10, 10, 10, 11, 32, 90]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>选择排序</strong></p>
</blockquote>
<p>原理<br>首先从原始数组中找到最小的元素，并把该元素放在数组的最前面，然后再从剩下的元素中寻找最小的元素，放在之前最小元素的后面，知道排序完毕。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(arr); <span class="comment">// [0, 1, 2, 3, 4, 6, 10]</span></span><br><span class="line">&#125;;</span><br><span class="line">selectSort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//minIndex始终保存着最小值的位置的索引，随着i的自增，遍历的数组长度越来越短，直到完成排序。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>vue 实现双向绑定原理</strong></p>
</blockquote>
<p>vue2.x版本</p>
<p>vue实现数据双向绑定主要是：<br>采用数据劫持结合发布者-订阅者模式的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的 <code>setter</code> ， <code>getter</code> ，在数据变动时发布消息给订阅者，触发相应监听回调。<br>当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 <code>Object.defineProperty()</code> 将它们转为 <code>getter/setter</code> 。<br>用户看不到 <code>getter/setter</code> ，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;; </span><br><span class="line"><span class="keyword">let</span> value = <span class="string">""</span>; </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"value"</span>, &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">	<span class="comment">// 读取值得时候会触发get操作</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"get"</span>)</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(newVal) &#123;</span><br><span class="line">	<span class="comment">// 修改对象的value值时触发set</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"set"</span>);</span><br><span class="line">        <span class="keyword">return</span> value = newVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">obj.value = <span class="number">123</span>; <span class="comment">// 触发set</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.value); <span class="comment">// 触发get</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数组降维 vue双向绑定原理  函数节流防抖 数组对象扩展  冒泡排序 快速排序 插入排序 选择排序 二分查找算法</tag>
      </tags>
  </entry>
  <entry>
    <title>编程题(三)</title>
    <url>/2020/07/09/%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p><strong>手动封装filter方法</strong></p>
</blockquote>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.MyFilter = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fn(<span class="keyword">this</span>[i],i))&#123;</span><br><span class="line">            result.push(<span class="keyword">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>].MyFilter(<span class="function"><span class="keyword">function</span>(<span class="params">val, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrs); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>实现一个new</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line">    <span class="keyword">let</span> res = fn.apply(obj,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> res===<span class="string">'object'</span>?res:obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name || <span class="string">"lisa"</span>;</span><br><span class="line">    <span class="keyword">this</span>.age = age || <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`i am <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,今年<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>岁`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person2 = _new(Person, <span class="string">"lida"</span>, <span class="number">18</span>);</span><br><span class="line">person2.say(); <span class="comment">// i am lida,今年18岁</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>给定两个数组找合集</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collection</span>(<span class="params">arr1,arr2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr1.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> idx = arr2.indexOf(arr1[i]);</span><br><span class="line">        <span class="keyword">if</span>(idx&gt;<span class="number">-1</span>)&#123;</span><br><span class="line">            res.push(arr1[i]);</span><br><span class="line">            arr2.splice(idx,<span class="number">1</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line">collection([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]); <span class="comment">// [1,2,1]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>字符串大小写取反</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">negation</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/\w/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> m === m.toLowerCase()?m.toUpperCase():m.toLowerCase();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">negation(<span class="string">'aBc'</span>); <span class="comment">// "AbC"</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>手写filter方法  实现一个new 给定两个数组找合集 字符串大小写取反</tag>
      </tags>
  </entry>
  <entry>
    <title>编程题（二）</title>
    <url>/2020/06/05/%E7%BC%96%E7%A8%8B%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>平时喜欢做一些编程题，来扩展思维，把我平时练习中遇到的比较经典的题目以及我的解题思路放上来，大家可以一起学习交流，就当做是我的一个学习笔记吧！题目数量较多我会分批记录到我的博客上面来，文笔粗糙，只记录干货，这是编程题第二期分享.</p>
<a id="more"></a>
<blockquote>
<p><strong>绝对值最小</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">-98</span>, <span class="number">-22</span>, <span class="number">-8</span>, <span class="number">-3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMinAbsOfArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        newArr.push(<span class="built_in">Math</span>.abs(a[i]));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="built_in">Math</span>.min(...newArr);</span><br><span class="line">    <span class="keyword">let</span> index;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(a[i]) == num) &#123;</span><br><span class="line">            index = a.indexOf(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> a[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(findMinAbsOfArr(a));</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>获取两个日期之间的有效日期</strong></p>
</blockquote>
<p>求两个日期中间的有效日期，如2015-2-8到2015-3-3</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rangeDays</span>(<span class="params">day1, day2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(day1).getTime(); <span class="comment">// 获取给定日期的毫秒数</span></span><br><span class="line">    <span class="keyword">const</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(day2).getTime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> range = time2 - time1; <span class="comment">// 计算两个日期之间间隔毫秒数</span></span><br><span class="line">    <span class="keyword">const</span> dayTimes = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 获取一天的毫秒数</span></span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (total &lt;= range &amp;&amp; range &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result.push(<span class="keyword">new</span> <span class="built_in">Date</span>(time1 + total).toLocaleDateString().replace(<span class="regexp">/\//g</span>, <span class="string">'-'</span>));</span><br><span class="line">        total += dayTimes;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">rangeDays(<span class="string">"2015,2,8"</span>, <span class="string">"2015,3,3"</span>);</span><br></pre></td></tr></table></figure>

<p>这里有一个new Date().toLocalDateString()方法，返回返回该日期对象日期部分的字符串.<br>我还发现new Date(2015, 2, 8).getTime() 和new Date(‘2015, 2, 8’).getTime() 这两种写法返回的毫秒数不一样，经过试验，只有字符串日期返回的日期才是标准日期，大家可以试一下。</p>
<p>下面是对于js获取时间new Date()的相关介绍</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取指定月份天数，new一个日期对象时候传入(年份,月份,0)获取几号就可以了!</span></span><br><span class="line"><span class="keyword">let</span> days = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">2</span>, <span class="number">0</span>).getDate(); <span class="comment">// 29 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">myDate.getYear(); <span class="comment">//获取当前年份(2位)</span></span><br><span class="line">myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">myDate.getMonth(); <span class="comment">//获取当前月份(0-11,0代表1月)         // 所以获取当前月份是myDate.getMonth()+1; </span></span><br><span class="line">myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">myDate.getDay(); <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></span><br><span class="line">myDate.getTime(); <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">myDate.getHours(); <span class="comment">//获取当前小时数(0-23)</span></span><br><span class="line">myDate.getMinutes(); <span class="comment">//获取当前分钟数(0-59)</span></span><br><span class="line">myDate.getSeconds(); <span class="comment">//获取当前秒数(0-59)</span></span><br><span class="line">myDate.getMilliseconds(); <span class="comment">//获取当前毫秒数(0-999)</span></span><br><span class="line">myDate.toLocaleDateString(); <span class="comment">//获取当前日期 "2020/6/12"</span></span><br><span class="line"><span class="keyword">let</span> mytime = myDate.toLocaleTimeString(); <span class="comment">//获取当前时间 "上午1:17:20"</span></span><br><span class="line">myDate.toLocaleString(); <span class="comment">//获取日期与时间 "2020/6/12 上午1:17:45"</span></span><br><span class="line"></span><br><span class="line">JS获取当前时间戳</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line">将字符串形式的日期转换成日期对象</span><br><span class="line"><span class="keyword">var</span> strTime = <span class="string">"2011-04-16"</span>; <span class="comment">//字符串日期格式           </span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(strTime.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>))); <span class="comment">// Date.parse(dateString) 隐式调用 new Date(dateString).getTime()；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>() 参数说明：</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//参数可以为整数; 也可以为字符串; 但格式必须正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2009</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2009/1/1"</span>); <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2009-1-1"</span>); <span class="comment">//错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(year, month, date, hrs, min, sec) <span class="comment">//按给定的参数创建一日期对象</span></span><br><span class="line"></span><br><span class="line">日期对象比较两个日期</span><br><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">myDate.setFullYear(<span class="number">2020</span>, <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">if</span> (myDate &gt; today) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>字符串数组排序</strong></p>
</blockquote>
<p>题目描述：<br>在一个字符串中有红、黄、蓝三种颜色的球，且个数不相等，顺序不一致，请为该数组排序。使得排序后数组中球的顺序为：黄、红、蓝。<br>例如：红蓝蓝黄红黄蓝红红黄红，排序后为：黄黄黄红红红红红蓝蓝蓝。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">"红"</span>, <span class="string">"蓝"</span>, <span class="string">"蓝"</span>, <span class="string">"黄"</span>, <span class="string">"红"</span>, <span class="string">"黄"</span>, <span class="string">"蓝"</span>, <span class="string">"蓝"</span>, <span class="string">"蓝"</span>];</span><br><span class="line"><span class="keyword">const</span> res = [];</span><br><span class="line"><span class="keyword">const</span> yellow = [],</span><br><span class="line">    red = [],</span><br><span class="line">    blue = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === <span class="string">"黄"</span>) &#123;</span><br><span class="line">        yellow.push(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] === <span class="string">"红"</span>) &#123;</span><br><span class="line">        red.push(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        blue.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">res.push(...yellow, ...red, ...blue);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">方法二：</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">"红"</span>, <span class="string">"蓝"</span>, <span class="string">"蓝"</span>, <span class="string">"黄"</span>, <span class="string">"红"</span>, <span class="string">"黄"</span>, <span class="string">"蓝"</span>, <span class="string">"蓝"</span>, <span class="string">"蓝"</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="string">"黄"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"红"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"蓝"</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> obj[a] - obj[b]);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<p>方法一是我写的，方法二是看了别人的解题思路，果然是高级，其实一开始我也想通过hash对象映射，通过数字大小进行排序，但是没有深入去想，直接写了一个，性能上面肯定不如方法二，大家可以自己试着做一下。</p>
<blockquote>
<p><strong>求多个数组之间的交集</strong></p>
</blockquote>
<p>例子：let a = [1, 2, 3]; let b = [3, 4, 5]; 交集 = [3]; </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>， <span class="number">3</span>]); <span class="comment">// 先去重</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">2</span>, <span class="number">2</span>， <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="keyword">let</span> res = [...a].filter(<span class="function"><span class="params">item</span> =&gt;</span> b.has(item));</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> c = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> handle = <span class="function">(<span class="params">...arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> acc.filter(<span class="function"><span class="params">item</span> =&gt;</span> cur.includes(item));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(handle(a, b, c))</span></span><br><span class="line">handle(a, b, c);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>数字分割</strong></p>
</blockquote>
<p>题目描述：<br>将 ‘1000000000’形式的字符串，以每3位进行分割展示 ‘1000.000.000’, 多种实现方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1000000000.</span>.toLocaleString(); <span class="comment">// 1000,000,000</span></span><br><span class="line"><span class="number">1000000000.</span>.toLocaleString(<span class="string">'de-DE'</span>); <span class="comment">// 1000.000.000 德国通过 .分割金钱</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000000000.</span>.toLocaleString().replace(<span class="string">'/,/g'</span>, <span class="string">'.'</span>); <span class="comment">// 1000.000.000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这种实现方式有些繁琐，不推荐，思路放上来供大家参考</span></span><br><span class="line"><span class="keyword">const</span> _splitNumber = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> nums = num.toString();</span><br><span class="line">    <span class="keyword">let</span> len = ~~(nums.length / <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        res = <span class="string">'.'</span> + nums.slice(<span class="number">-3</span>) + res;</span><br><span class="line">        nums = nums.slice(<span class="number">0</span>, nums.length - <span class="number">3</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (nums) &#123;</span><br><span class="line">        res = nums + res;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> newNum = _splitNumber(<span class="number">1000000000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newNum); <span class="comment">// 1000.000.000</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>实现对象深拷贝</strong></p>
</blockquote>
<p>浅拷贝：也就是拷贝A对象里面的数据，但是不拷贝A对象里面的子对象。</p>
<p>深拷贝：会克隆出一个对象，数据相同，但是引用地址不同（就是拷贝A对象里面的数据，而且拷贝它里面的子对象）。</p>
<p>做这道题首先要明白什么是深拷贝，什么是浅拷贝，实现深拷贝和浅拷贝都有哪些方法，若自己手动实现一个深拷贝，不假思索直接写就是下面这样：</p>
<p>代码示例（错误示范）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepcopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            res[key] = obj[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = obj;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        d: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> newobj = deepcopy(obj);</span><br><span class="line">newobj.a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj, newobj); <span class="comment">// obj &#123;a:1,b:2,c:&#123;d:1&#125;&#125;  newobj &#123;a:2,b:2,c:&#123;d:1&#125;&#125;;</span></span><br></pre></td></tr></table></figure>

<p>看起来貌似实现了，然而并没有，试着改一下d的值看一下，是不是发现跟你预想的不太一样，其中一个d的值改动影响了另一个对象中的d, 这并不是咱们想要的结果，深拷贝只实现了一层，相当于Object.assign({}, obj)这种方法拷贝的对象，只会拷贝一层，这个地方需要注意哦，那我们看一下如何手写实现真正的深拷贝。</p>
<p>代码实现 （正确示范）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepcopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 判断参数类型是否为对象类型</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        res = obj;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 通过递归实现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            res[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ? deepcopy(obj[key]) : obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: &#123;</span><br><span class="line">        d: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> newobj = deepcopy(obj);</span><br><span class="line">newobj.c.d = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newobj);</span><br></pre></td></tr></table></figure>

<p>实现深拷贝应该还有很多好的方式，大家可以自己写一下，换一种思路试试看！</p>
]]></content>
      <tags>
        <tag>绝对值最小 日期对象 字符串数组排序 数组交集 数字分割 对象深拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title>开发过程中遇到的问题</title>
    <url>/2020/07/20/%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>这两天做了一个小页面，项目搭建用的是vue/cli，过程中遇到了一些棘手问题，现在回过头来总结一下。</p>
<p>vue-cli 3 脚手架搭建（node版本要8.9+）：</p>
<ol>
<li>npm install @vue/cli -g</li>
<li>vue.create myApp</li>
<li>npm serve 启动项目</li>
</ol>
<a id="more"></a> 

<p>搭建过程中出现的问题：</p>
<blockquote>
<p><strong>问题一</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">error An unexpected error occurred: <span class="string">"https://registry.npm.taobao.org/animate.css: tunneling socket could not be established, cause=getaddrinfo ENOTFOUND web-proxy"</span>.</span><br></pre></td></tr></table></figure>

<p>“<a href="https://registry.npm.taobao.org/animate.css:无法建立隧道套接字”，taobao镜像不可用，还原成npm" target="_blank" rel="noopener">https://registry.npm.taobao.org/animate.css:无法建立隧道套接字”，taobao镜像不可用，还原成npm</a> 的</p>
<blockquote>
<p><strong>解决方案</strong></p>
</blockquote>
<p>执行 npm config set registry <a href="https://registry.npmjs.org" target="_blank" rel="noopener">https://registry.npmjs.org</a> –global</p>
<blockquote>
<p><strong>问题二</strong></p>
</blockquote>
<p>通过vue脚手架搭建，执行命令 npm install @vue/cli -g 出现报错</p>
<blockquote>
<p><strong>解决方案</strong></p>
</blockquote>
<p>改用cnpm install @vue/cli -g,怀疑是由于下载时间太久的原因。</p>
<blockquote>
<p><strong>问题三</strong></p>
</blockquote>
<p>报错eslint的问题</p>
<blockquote>
<p><strong>解决方案</strong></p>
</blockquote>
<p>删除node-module,重新install</p>
<blockquote>
<p><strong>页面开发遇到的相关问题</strong></p>
</blockquote>
<blockquote>
<p><strong>问题一</strong></p>
</blockquote>
<p>父元素嵌套一个非空子元素，子元素margin-top不生效</p>
<blockquote>
<p><strong>解决方案</strong></p>
</blockquote>
<p>给父级加padding-top:1</p>
<blockquote>
<p><strong>问题二</strong></p>
</blockquote>
<p>echarts按需引入，绘制饼图，图例不显示的问题</p>
<blockquote>
<p><strong>解决方案</strong></p>
</blockquote>
<p>引入legend组件</p>
<blockquote>
<p><strong>问题三</strong></p>
</blockquote>
<p>通过加载插件的方式引入Message，导致每次页面刷新的时候会自动弹出一个通知消息（该情况只在引入局部插件才会引起）</p>
<blockquote>
<p><strong>解决方案</strong></p>
</blockquote>
<p>通过加载组件的方式引入即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.use(Message) </span></span><br><span class="line">Vue.component(Message.name, Message)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>关闭eslint</strong></p>
</blockquote>
<p>新建vue.config.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    lintOnSave:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>canva绘制星空特效</title>
    <url>/2020/07/30/canva%E7%BB%98%E5%88%B6%E6%98%9F%E7%A9%BA%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<p><img src="https://b3logfile.com/file/2020/07/star-08673e36.png" alt="star.png"></p>
<a id="more"></a> 

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w, h;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    w = canvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    h = canvas.height = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">&#125;;</span><br><span class="line">resize();</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    resize();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 绘制背景</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.fillStyle = <span class="string">"#020215"</span>;</span><br><span class="line">    ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.save();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机颜色构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.r = ~~(<span class="built_in">Math</span>.random() * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">this</span>.g = ~~(<span class="built_in">Math</span>.random() * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">this</span>.b = ~~(<span class="built_in">Math</span>.random() * <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">this</span>.rgb = <span class="string">`rgb(<span class="subst">$&#123;<span class="keyword">this</span>.r&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.g&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.b&#125;</span>)`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建粒子配置</span></span><br><span class="line"><span class="keyword">let</span> dots = &#123;</span><br><span class="line">    n: <span class="number">300</span>, <span class="comment">// 粒子数量</span></span><br><span class="line">    arr: [],</span><br><span class="line">    minDis: <span class="number">50</span>, <span class="comment">// 两个粒子最小间距</span></span><br><span class="line">    radiusArr: [],</span><br><span class="line">    d_mouse: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个粒子的配置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 随机颜色</span></span><br><span class="line">    <span class="keyword">this</span>.color = <span class="keyword">new</span> Color().rgb;</span><br><span class="line">    <span class="comment">// 圆心坐标</span></span><br><span class="line">    <span class="keyword">this</span>.x = ~~(<span class="built_in">Math</span>.random() * w);</span><br><span class="line">    <span class="keyword">this</span>.y = ~~(<span class="built_in">Math</span>.random() * h);</span><br><span class="line">    <span class="comment">// 半径</span></span><br><span class="line">    <span class="keyword">this</span>.r = ~~(<span class="built_in">Math</span>.random() * <span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 速度</span></span><br><span class="line">    <span class="keyword">this</span>.vx = (<span class="built_in">Math</span>.random() - <span class="number">0.5</span>) * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">this</span>.vy = (<span class="built_in">Math</span>.random() - <span class="number">0.5</span>) * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">Dot.prototype.draw = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.fillStyle = <span class="keyword">this</span>.color;</span><br><span class="line">    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.r, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">false</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建粒子放入数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dots.n; i++) &#123;</span><br><span class="line">    dots.arr.push(<span class="keyword">new</span> Dot());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制粒子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawDots</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// drawBg();</span></span><br><span class="line">    dots.arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item.draw();</span><br><span class="line">        dots.radiusArr.push(item.r);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动粒子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveDots</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dots.arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.x &gt; w || item.x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            item.vx = -item.vx;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (item.y &gt; h || item.y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            item.vy = -item.vy;</span><br><span class="line">        &#125;</span><br><span class="line">        item.x += item.vx;</span><br><span class="line">        item.y += item.vy;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合颜色</span></span><br><span class="line"><span class="comment">// function mixColor(dot1, dot2) &#123;</span></span><br><span class="line"><span class="comment">//     let r1 = dot1.r;</span></span><br><span class="line"><span class="comment">//     let r2 = dot2.r;</span></span><br><span class="line"><span class="comment">//     let color1 = dot1.color;</span></span><br><span class="line"><span class="comment">//     let color2 = dot2.color;</span></span><br><span class="line"><span class="comment">//     let r = ~~((color1.r * r1 + color2.r * r2) / (r1 + r2));</span></span><br><span class="line"><span class="comment">//     let g = ~~((color1.g * r1 + color2.g * r2) / (r1 + r2));</span></span><br><span class="line"><span class="comment">//     let b = ~~((color1.b * r1 + color2.b * r2) / (r1 + r2));</span></span><br><span class="line"><span class="comment">//     return `rgba($&#123;r&#125;,$&#123;g&#125;,$&#123;b&#125;,1)`</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连线</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dots.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; dots.n; j++) &#123;</span><br><span class="line">            <span class="keyword">let</span> dot1 = dots.arr[i];</span><br><span class="line">            <span class="keyword">let</span> dot2 = dots.arr[j];</span><br><span class="line">            <span class="comment">// let color = mixColor(dot1, dot2);</span></span><br><span class="line">            <span class="comment">// console.log(color)</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(dot1.x - dot2.x) &lt; dots.minDis &amp;&amp; <span class="built_in">Math</span>.abs(dot1.y - dot2.y) &lt; dots.minDis) &#123;</span><br><span class="line">                ctx.lineWidth = <span class="number">0.2</span>;</span><br><span class="line">                ctx.beginPath();</span><br><span class="line">                ctx.strokeStyle = <span class="string">"#000"</span>;</span><br><span class="line">                ctx.moveTo(dot1.x, dot1.y);</span><br><span class="line">                ctx.lineTo(dot2.x, dot2.y);</span><br><span class="line">                ctx.stroke();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标移入粒子变大</span></span><br><span class="line"></span><br><span class="line">canvas.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pX = ev.pageX;</span><br><span class="line">    <span class="keyword">let</span> pY = ev.pageY;</span><br><span class="line">    dots.arr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(item.x - pX) &lt; dots.d_mouse &amp;&amp; <span class="built_in">Math</span>.abs(item.y - pY) &lt; dots.d_mouse) &#123;</span><br><span class="line">            item.r = dots.radiusArr[index] * <span class="number">5</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            item.r = dots.radiusArr[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无限运动</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">    moveDots();</span><br><span class="line">    drawDots();</span><br><span class="line">    connect();</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(animate);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">animate();</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>ev的offsetX,pageX,clientX和screenX</title>
    <url>/2020/07/30/ev%E7%9A%84offsetX-pageX-clientX%E5%92%8CscreenX/</url>
    <content><![CDATA[<p>event.offsetX、event.offsetY（相对事件发生的具体元素左上角的定位）</p>
<p>鼠标相对于事件源元素（srcElement）的X,Y坐标，只有IE事件有这2个属性，标准事件没有对应的属性。</p>
<p>event.clientX、event.clientY（相对可视区域左上角的绝对定位）</p>
<p>鼠标相对于浏览器窗口可视区域的X，Y坐标（窗口坐标），可视区域不包括工具栏和滚动条。IE事件和标准事件都定义了这2个属性</p>
<p>event.pageX、event.pageY（整个HTML文档中的绝对定位）</p>
<p>类似于event.clientX、event.clientY，但它们使用的是文档坐标而非窗口坐标。这2个属性不是标准属性，但得到了广泛支持。IE事件中没有这2个属性。</p>
<p>event.screenX、event.screenY（不常用）</p>
<p>鼠标相对于用户显示器屏幕左上角的X,Y坐标。标准事件和IE事件都定义了这2个属性(就是上面的地址栏，收藏夹都会算进去)</p>
]]></content>
  </entry>
  <entry>
    <title>按钮悬停霓虹灯特效</title>
    <url>/2020/08/03/css%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%92%AE%E6%82%AC%E5%81%9C%E9%9C%93%E8%99%B9%E7%81%AF%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<p><img src="https://file.leeguoo.com/btn_lisa.gif" alt="按钮"></p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#21ebff</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#21ebff</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#21ebff</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#21ebff</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#21ebff</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#21ebff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span> <span class="number">#21ebff</span>;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(<span class="number">115deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(<span class="number">270deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>tips:</p>
<p>filter:hue-rotate() 色调旋转滤镜 单位支持deg（0~360deg）以及其他css单位 。好处是省代码，不用重复设置border，color和bg的颜色，不兼容IE,Edge13+支持，其他浏览器支持</p>
]]></content>
  </entry>
</search>
