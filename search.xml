<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>实现一个对话框支持拖拽</title>
    <url>/2020/06/05/dragBox/</url>
    <content><![CDATA[<p>面试中经常会被问到有没有做过类似模态框的拖拽行为，当时脑子里面没有一个具体的实现方向，大致思路，其实自己静下心动手实践一下也不难，了解如何去操作，实现逻辑屡清楚了基本离成功就不远了，需要注意的事，这里面涉及到很多细节问题，比如获取鼠标点击位置距离wrap的一个相对位置，wrap自身的一个宽度获取，有滚动条的时候，对于滚动距离的获取等等，这些一定要弄清楚了。</p>
<a id="more"></a>

<blockquote>
<p> <strong>创建一个dialog类，实现一个dialog对话框，可拖拽</strong></p>
</blockquote>
<p>效果图</p>
<p><img src="https://b3logfile.com/file/2020/06/1-a4f64515.png" alt="1.png"></p>
<p><img src="https://b3logfile.com/file/2020/06/2-f2a4be67.png" alt="2.png"></p>
<p><img src="https://b3logfile.com/file/2020/06/3-ba32c5ee.png" alt="3.png"></p>
<p>具体实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dialog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.isMoving = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.dialog = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.box = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.text = text || <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">this</span>.toLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.toTop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open() &#123;</span><br><span class="line">        <span class="keyword">this</span>.dialog = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        <span class="keyword">this</span>.dialog.style = <span class="string">`</span></span><br><span class="line"><span class="string">            width:200px;</span></span><br><span class="line"><span class="string">            height:100px;</span></span><br><span class="line"><span class="string">            padding:20px;</span></span><br><span class="line"><span class="string">            background-color:#ccc;</span></span><br><span class="line"><span class="string">            position:absolute;</span></span><br><span class="line"><span class="string">            top:50%;</span></span><br><span class="line"><span class="string">            left:50%;</span></span><br><span class="line"><span class="string">            border-radius:4px;`</span>;</span><br><span class="line">        <span class="keyword">this</span>.dialog.innerText = <span class="keyword">this</span>.text;</span><br><span class="line">        <span class="keyword">this</span>.dialog.addEventListener(<span class="string">'click'</span>, ev =&gt; ev.stopPropagation());</span><br><span class="line">        <span class="keyword">this</span>.dialog.addEventListener(<span class="string">'mousedown'</span>, <span class="keyword">this</span>.handleMouseDown.bind(<span class="keyword">this</span>));</span><br><span class="line">        <span class="comment">// 这里需要注意，为了防止鼠标移动过快出现bug，将事件代理到document身上</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, <span class="keyword">this</span>.handleMouseMove.bind(<span class="keyword">this</span>));</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, <span class="keyword">this</span>.handleMouseUp.bind(<span class="keyword">this</span>));</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.dialog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleMouseDown(ev) &#123;</span><br><span class="line">        <span class="keyword">this</span>.isMoving = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 鼠标按下的时候，生成一个框，给基础样式</span></span><br><span class="line">        <span class="comment">// 位置和原来的dom重合，加定位</span></span><br><span class="line">        <span class="keyword">this</span>.box = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        <span class="keyword">this</span>.box.style = <span class="string">`</span></span><br><span class="line"><span class="string">            width:<span class="subst">$&#123;<span class="keyword">this</span>.dialog.offsetWidth&#125;</span>px;</span></span><br><span class="line"><span class="string">            height:<span class="subst">$&#123;<span class="keyword">this</span>.dialog.offsetHeight&#125;</span>px;</span></span><br><span class="line"><span class="string">            position:absolute;</span></span><br><span class="line"><span class="string">            top:<span class="subst">$&#123;<span class="keyword">this</span>.dialog.offsetTop&#125;</span>px;</span></span><br><span class="line"><span class="string">            left:<span class="subst">$&#123;<span class="keyword">this</span>.dialog.offsetLeft&#125;</span>px;</span></span><br><span class="line"><span class="string">            border:1px dashed #000;</span></span><br><span class="line"><span class="string">            border-radius:4px;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.box);</span><br><span class="line">        <span class="comment">// 鼠标按下的时候，记录鼠标点击的位置相对于div块的坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x = ev.offsetX;</span><br><span class="line">        <span class="keyword">this</span>.y = ev.offsetY;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleMouseMove(ev) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isMoving) &#123;</span><br><span class="line">            <span class="comment">// 有滚动条要把滚动条的距离算在内</span></span><br><span class="line">            <span class="keyword">let</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft;</span><br><span class="line">            <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// div跟着走的时候，需要把鼠标按下时的那个相对坐标算在内</span></span><br><span class="line">            <span class="keyword">this</span>.toLeft = ev.clientX + scrollLeft - <span class="keyword">this</span>.x;</span><br><span class="line">            <span class="keyword">this</span>.toTop = ev.clientY + scrollTop - <span class="keyword">this</span>.y;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置一下拖拽边界</span></span><br><span class="line">            <span class="keyword">let</span> maxLeft = <span class="built_in">window</span>.innerWidth + scrollLeft - <span class="keyword">this</span>.dialog.offsetWidth;</span><br><span class="line">            <span class="keyword">let</span> maxTop = <span class="built_in">window</span>.innerHeight + scrollTop - <span class="keyword">this</span>.dialog.offsetHeight;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.toLeft &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果left小于0，则置为0，防止div从左侧拖出</span></span><br><span class="line">                <span class="keyword">this</span>.toLeft = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.toLeft &gt; maxLeft) &#123;</span><br><span class="line">                <span class="comment">// 如果left值大于极限，则置为极限，防止div从右侧被拖出</span></span><br><span class="line">                <span class="keyword">this</span>.toLeft = maxLeft;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.toTop &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.toTop = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.toTop &gt; maxTop) &#123;</span><br><span class="line">                <span class="keyword">this</span>.toTop = maxTop;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置一下框的位置</span></span><br><span class="line">            <span class="keyword">this</span>.box.style.left = <span class="keyword">this</span>.toLeft + <span class="string">'px'</span>;</span><br><span class="line">            <span class="keyword">this</span>.box.style.top = <span class="keyword">this</span>.toTop + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleMouseUp() &#123;</span><br><span class="line">        <span class="keyword">this</span>.a += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 鼠标抬起的时候，设置一下div块的位置，跟到框所在的位置</span></span><br><span class="line">        <span class="keyword">this</span>.dialog.style.left = <span class="keyword">this</span>.toLeft + <span class="string">'px'</span>;</span><br><span class="line">        <span class="keyword">this</span>.dialog.style.top = <span class="keyword">this</span>.toTop + <span class="string">'px'</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(<span class="keyword">this</span>.box);</span><br><span class="line">        <span class="comment">// 清除事件监听事件</span></span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, <span class="keyword">this</span>.handleMouseMove);</span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, <span class="keyword">this</span>.handleMouseUp);</span><br><span class="line">        <span class="keyword">this</span>.isMoving = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> dialog = <span class="keyword">new</span> Dialog(<span class="string">'hello'</span>);</span><br><span class="line">dialog.open();</span><br></pre></td></tr></table></figure>

<pre><code>这里的mousemove的监听对象修改为了document，否则如果我们拖拽速度太快会出现bug，即可能鼠标脱离了容器，然后这时就会出现问题，
只要将事件代理到了document身上就可以解决这个问题了。</code></pre>]]></content>
      <tags>
        <tag>diolag拖拽</tag>
      </tags>
  </entry>
  <entry>
    <title>编程题（一）</title>
    <url>/2020/06/04/%E7%BC%96%E7%A8%8B1/</url>
    <content><![CDATA[<p>最近迷上做js算法题了，哈哈哈，以后会持续更新我做过比较经典有意思的算法题，我目前只做一些比较基础的，查缺补漏，感觉自己的js基础还是欠缺，勤能补拙，先把地基打好才能盖出好房子，你说是吧~~</p>
<a id="more"></a>

<blockquote>
<p> <strong>数组降维</strong></p>
</blockquote>
<p>将多维数组降成一维数组结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_myFlat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 判断当前元素是否是数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">            <span class="comment">// arguments.callee（）：匿名函数的递归调用，保证函数的封装性，与函数名解耦</span></span><br><span class="line">            res = res.concat(<span class="built_in">arguments</span>.callee(arr[i]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = res.concat(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(_myFlat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, [<span class="number">8</span>]]]])); <span class="comment">// [1,2,4,5,6,8]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>vue 实现双向绑定原理</strong></p>
</blockquote>
<p>vue2.x版本</p>
<p>vue实现数据双向绑定主要是：<br>采用数据劫持结合发布者-订阅者模式的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的 <code>setter</code> ， <code>getter</code> ，在数据变动时发布消息给订阅者，触发相应监听回调。<br>当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 <code>Object.defineProperty()</code> 将它们转为 <code>getter/setter</code> 。<br>用户看不到 <code>getter/setter</code> ，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;; </span><br><span class="line"><span class="keyword">let</span> value = <span class="string">""</span>; </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"value"</span>, &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">	<span class="comment">// 读取值得时候会触发get操作</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"get"</span>)</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(newVal) &#123;</span><br><span class="line">	<span class="comment">// 修改对象的value值时触发set</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"set"</span>);</span><br><span class="line">        <span class="keyword">return</span> value = newVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">obj.value = <span class="number">123</span>; <span class="comment">// 触发set</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.value); <span class="comment">// 触发get</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vue 3.x版本</span></span><br><span class="line"><span class="string">使用proxy技术实现简单的数据绑定</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        name: <span class="string">'lisa'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="keyword">get</span>(target, key) &#123;</span><br><span class="line">            <span class="keyword">return</span> target[key];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(target, key, value) &#123;</span><br><span class="line">            target[key] = value;</span><br><span class="line">            <span class="built_in">console</span>.log(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// proxy.name='lili';</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>冒泡排序</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">let</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// console.log(arr);</span></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bubbleSort([<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>二分查找算法</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">arr, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = arr.length - <span class="number">1</span>, <span class="comment">//最大值</span></span><br><span class="line">        min = <span class="number">0</span>; <span class="comment">//最小值</span></span><br><span class="line">    <span class="keyword">while</span> (min &lt;= max) &#123;</span><br><span class="line">        <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor((max + min) / <span class="number">2</span>); <span class="comment">//中间值</span></span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; data) &#123;</span><br><span class="line">            min += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; data) &#123;</span><br><span class="line">            max -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//没找到返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(search([1, 2, 3, 4, 8], 8));</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>数组对象方法扩展</strong></p>
</blockquote>
<p>题目描述：<br>已知数组 data= [{ name: ‘低风险’, value: 300 }, { name: ‘中风险’, value: 230 }, { name: ‘高风险’, value: 409 }]；<br>获取指定key值所对应的value数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params">arr, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr) || !key) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"param is error"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item[key]) &#123;</span><br><span class="line">            res.push(item[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">    name: <span class="string">'低风险'</span>,</span><br><span class="line">    value: <span class="number">300</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: <span class="string">'中风险'</span>,</span><br><span class="line">    value: <span class="number">230</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: <span class="string">'高风险'</span>,</span><br><span class="line">    value: <span class="number">409</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> names = getName(data, <span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(names); <span class="comment">// ["低风险", "中风险", "高风险"]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> <strong>函数防抖/节流</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数防抖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 就是指触发事件后，在 n 秒内函数只能执行一次，如果触发事件后在 n 秒内又触发了事件，则会重新计算函数延执行时间。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见需要防抖事件 onresize，scroll，mousemove ,mousehover</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer !== <span class="literal">null</span>) &#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">        &#125;;</span><br><span class="line">        timer = setTimeout(fn, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random())</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, debounce(handle, <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> + description 函数节流使用场景</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> + 1 搜索框搜索输入，只需用户最后一次输入完，再发送请求</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> + 2 防止用户多次点击提交表单</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数组降维 vue双向绑定原理 冒泡排序 二分查找算法 函数节流防抖 数组对象扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>编程题（二）</title>
    <url>/2020/06/05/%E7%BC%96%E7%A8%8B2/</url>
    <content><![CDATA[<p>平时喜欢做一些编程题，来扩展思维，把我平时练习中遇到的比较经典的题目以及我的解题思路放上来，大家可以一起学习交流，就当做是我的一个学习笔记吧！题目数量较多我会分批记录到我的博客上面来，文笔粗糙，只记录干货，这是编程题第二期分享.</p>
<a id="more"></a>

<blockquote>
<p><strong>绝对值最小</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">-98</span>, <span class="number">-22</span>, <span class="number">-8</span>, <span class="number">-3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMinAbsOfArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        newArr.push(<span class="built_in">Math</span>.abs(a[i]));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="built_in">Math</span>.min(...newArr);</span><br><span class="line">    <span class="keyword">let</span> index;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(a[i]) == num) &#123;</span><br><span class="line">            index = a.indexOf(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> a[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(findMinAbsOfArr(a));</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>获取两个日期之间的有效日期</strong></p>
</blockquote>
<p>求两个日期中间的有效日期，如2015-2-8到2015-3-3</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rangeDays</span>(<span class="params">day1, day2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(day1).getTime(); <span class="comment">// 获取给定日期的毫秒数</span></span><br><span class="line">    <span class="keyword">const</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(day2).getTime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> range = time2 - time1; <span class="comment">// 计算两个日期之间间隔毫秒数</span></span><br><span class="line">    <span class="keyword">const</span> dayTimes = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 获取一天的毫秒数</span></span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (total &lt;= range &amp;&amp; range &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result.push(<span class="keyword">new</span> <span class="built_in">Date</span>(time1 + total).toLocaleDateString().replace(<span class="regexp">/\//g</span>, <span class="string">'-'</span>));</span><br><span class="line">        total += dayTimes;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">rangeDays(<span class="string">"2015,2,8"</span>, <span class="string">"2015,3,3"</span>);</span><br></pre></td></tr></table></figure>

<p>这里有一个new Date().toLocalDateString()方法，返回返回该日期对象日期部分的字符串.<br>我还发现new Date(2015, 2, 8).getTime() 和new Date(‘2015, 2, 8’).getTime() 这两种写法返回的毫秒数不一样，经过试验，只有字符串日期返回的日期才是标准日期，大家可以试一下。</p>
<p>下面是对于js获取时间new Date()的相关介绍</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取指定月份天数，new一个日期对象时候传入(年份,月份,0)获取几号就可以了!</span></span><br><span class="line"><span class="keyword">let</span> days = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">2</span>, <span class="number">0</span>).getDate(); <span class="comment">// 29 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">myDate.getYear(); <span class="comment">//获取当前年份(2位)</span></span><br><span class="line">myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">myDate.getMonth(); <span class="comment">//获取当前月份(0-11,0代表1月)         // 所以获取当前月份是myDate.getMonth()+1; </span></span><br><span class="line">myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">myDate.getDay(); <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></span><br><span class="line">myDate.getTime(); <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">myDate.getHours(); <span class="comment">//获取当前小时数(0-23)</span></span><br><span class="line">myDate.getMinutes(); <span class="comment">//获取当前分钟数(0-59)</span></span><br><span class="line">myDate.getSeconds(); <span class="comment">//获取当前秒数(0-59)</span></span><br><span class="line">myDate.getMilliseconds(); <span class="comment">//获取当前毫秒数(0-999)</span></span><br><span class="line">myDate.toLocaleDateString(); <span class="comment">//获取当前日期</span></span><br><span class="line"><span class="keyword">let</span> mytime = myDate.toLocaleTimeString(); <span class="comment">//获取当前时间 时间格式是 '2020/6/6'</span></span><br><span class="line">myDate.toLocaleString(); <span class="comment">//获取日期与时间</span></span><br><span class="line"></span><br><span class="line">JS获取当前时间戳</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line">将字符串形式的日期转换成日期对象</span><br><span class="line"><span class="keyword">var</span> strTime = <span class="string">"2011-04-16"</span>; <span class="comment">//字符串日期格式           </span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(strTime.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>))); <span class="comment">// Date.parse(dateString) 隐式调用 new Date(dateString).getTime()；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>() 参数说明：</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//参数可以为整数; 也可以为字符串; 但格式必须正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2009</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2009/1/1"</span>); <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2009-1-1"</span>); <span class="comment">//错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(year, month, date, hrs, min, sec) <span class="comment">//按给定的参数创建一日期对象</span></span><br><span class="line"></span><br><span class="line">日期对象比较两个日期</span><br><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">myDate.setFullYear(<span class="number">2020</span>, <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">if</span> (myDate &gt; today) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>绝对值最小 日期对象</tag>
      </tags>
  </entry>
</search>
